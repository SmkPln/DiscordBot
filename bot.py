import discord
from discord.ext import commands
import os 
import pandas as pd
import asyncio
from config import settings
from discord import FFmpegPCMAudio
from collections import defaultdict

def load_questions():
    df = pd.read_excel("questions.xlsx")
    questions = {}

    for _, row in df.iterrows():
        category = row["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"]
        points = row["–ë–∞–ª–∏"]
        q_type = row["–¢–∏–ø"]
        q_data = row["–î–∞–Ω—ñ (—Ñ–∞–π–ª/—Ç–µ–∫—Å—Ç)"]
        question = row["–ü–∏—Ç–∞–Ω–Ω—è"]
        answer = row["–í—ñ–¥–ø–æ–≤—ñ–¥—å"]

        if category not in questions:
            questions[category] = {}

        questions[category][points] = (q_type, q_data, question, answer)

    return questions 


questions = load_questions()
player_scores = {} 
used_questions = set()

class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix="!", intents=discord.Intents.all())

    async def on_ready(self):
        guild = bot.get_guild(1171884455623925913)  # –ó–∞–º—ñ–Ω–∞ SERVER_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π ID –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        bot_member = guild.get_member(bot.user.id)  # –û—Ç—Ä–∏–º—É—î–º–æ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        permissions = bot_member.guild_permissions  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è –±–æ—Ç–∞
        print(permissions)
        await self.tree.sync()  # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
        print(f"–ë–æ—Ç {self.user} –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è!")

bot = MyBot()

@bot.tree.command(name="show_questions", description="–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ —ó—Ö —Å—Ç–∞—Ç—É—Å")
async def show_questions(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú –î–æ—Å—Ç—É–ø–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", color=0x3498db)
    
    for category, points_dict in questions.items():
        question_list = []
        for points in sorted(points_dict.keys()):
            status = "‚úÖ" if (category, points) in used_questions else "‚ùì"
            question_list.append(f"{status} **{points} –±–∞–ª—ñ–≤**")
        
        embed.add_field(name=category, value="\n".join(question_list), inline=False)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="choose", description="–í–∏–±—Ä–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
async def choose(interaction: discord.Interaction, category: str, points: int):
    if (category, points) in used_questions:
        await interaction.response.send_message("‚ö†Ô∏è –¶–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ!")
        return

    if category in questions and points in questions[category]:
        q_type, q_data, question_text, answer = questions[category][points]
        used_questions.add((category, points))  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ

        embed = discord.Embed(title=f"{category} - {points} –±–∞–ª—ñ–≤", description=question_text, color=0x00ff00)

        if q_type == "image":  # üì∑ –§–æ—Ç–æ + –ü–∏—Ç–∞–Ω–Ω—è
            if not os.path.exists(q_data):
                await interaction.response.send_message("‚ùå –§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return
            file = discord.File(q_data, filename="question.jpg")
            embed.set_image(url="attachment://question.jpg")
            await interaction.response.send_message(file=file, embed=embed)

        elif q_type == "audio":  # üîä –ó–≤—É–∫ + –ü–∏—Ç–∞–Ω–Ω—è
            if not os.path.exists(q_data):
                await interaction.response.send_message("‚ùå –§–∞–π–ª –∞—É–¥—ñ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return
            file = discord.File(q_data, filename="question.mp3")
            await interaction.response.send_message(embed=embed, file=file)

        elif q_type == "text":  # üìù –û–ø–∏—Å + –ü–∏—Ç–∞–Ω–Ω—è
            embed.add_field(name="–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", value=q_data, inline=False)
            await interaction.response.send_message(embed=embed)

        else:
            await interaction.response.send_message("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–∏—Ç–∞–Ω–Ω—è!")
            return

        time_left = 60

        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–µ—Ä–æ–º
        timer_message = await interaction.followup.send(f"‚è≥ –¢–∞–π–º–µ—Ä: {time_left} —Å–µ–∫—É–Ω–¥")

        async def update_timer():
            nonlocal time_left
            while time_left > 0:
                await asyncio.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
                time_left -= 1  # –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–µ—Ä
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º —Ç–∞–π–º–µ—Ä–∞
                await timer_message.edit(content=f"‚è≥ –¢–∞–π–º–µ—Ä: {time_left} —Å–µ–∫—É–Ω–¥")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –≤ –æ–∫—Ä–µ–º–æ–º—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
        timer_task = asyncio.create_task(update_timer())

        # –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        def check(m):
            print(player_scores)
            return m.channel ==  interaction.channel and m.author != bot.user

        try:
            response = await bot.wait_for("message", check=check, timeout=time_left)
            if timer_task:
                timer_task.cancel()  # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞
                await timer_message.delete() 
        except asyncio.TimeoutError:
            await interaction.followup.send("‚è≥ –ß–∞—Å –≤–∏—á–µ—Ä–ø–∞–Ω–æ! –í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            return

        if response.content.strip().lower() == str(answer).strip().lower():
            player_scores[response.author.name] = player_scores.get(response.author.name, 0) + points
            await interaction.followup.send(f"‚úÖ {response.author.mention} –ø—Ä–∞–≤–∏–ª—å–Ω–æ! +{points} –±–∞–ª—ñ–≤\n –ó–∞—Ä–∞–∑ —Ç–∏ –º–∞—î—à {player_scores[response.author.name]} –±–∞–ª—ñ–≤")
        else:
            await interaction.followup.send(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ñ–¥–ø–æ–≤—ñ–¥—å: {answer}\n –ó–∞—Ä–∞–∑ —Ç–∏ –º–∞—î—à {player_scores.get(response.author.name, 0)} –±–∞–ª—ñ–≤")

@bot.tree.command(name="show_scores", description="–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –±–∞–ª—ñ–≤ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤")
async def show_scores(interaction: discord.Interaction):
    if not player_scores:
        await interaction.response.send_message("üìä –ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–≤ –±–∞–ª—ñ–≤!")
        return

    embed = discord.Embed(title="üèÜ –¢—É—Ä–Ω—ñ—Ä–Ω–∞ —Ç–∞–±–ª–∏—Ü—è", color=0xf1c40f)
    
    sorted_scores = sorted(player_scores.items(), key=lambda x: x[1], reverse=True)
    for i, (player, score) in enumerate(sorted_scores, start=1):
        embed.add_field(name=f"{i}. {player}", value=f"**{score} –±–∞–ª—ñ–≤**", inline=False)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="reset_scores", description="–°–∫–∏–¥–∞—î –±–∞–ª–∏ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤")
async def reset_scores(interaction: discord.Interaction):
    global player_scores
    player_scores = {}  # –û—á–∏—â—É—î–º–æ —Å–ø–∏—Å–æ–∫ –±–∞–ª—ñ–≤
    await interaction.response.send_message("üîÑ –í—Å—ñ –±–∞–ª–∏ –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ!")
            
# @bot.tree.command(name="check_all_questions", description="–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
# async def check_all_questions(interaction: discord.Interaction):
#     await interaction.response.defer(thinking=True)  # –ü–æ–∫–∞–∑–∞—Ç–∏ "–±–æ—Ç –¥—Ä—É–∫—É—î", —è–∫—â–æ –¥–æ–≤–≥–æ
    
#     for category, points_dict in questions.items():
#         for points, (q_type, q_data, question_text, answer) in sorted(points_dict.items()):
#             embed = discord.Embed(
#                 title=f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category} | {points} –±–∞–ª—ñ–≤",
#                 description=f"**–¢–∏–ø:** {q_type}\n**–ü–∏—Ç–∞–Ω–Ω—è:** {question_text}\n**–í—ñ–¥–ø–æ–≤—ñ–¥—å:** {answer}",
#                 color=0x95a5a6
#             )

#             if q_type == "image" and os.path.exists(q_data):
#                 file = discord.File(q_data, filename="question.jpg")
#                 embed.set_image(url="attachment://question.jpg")
#                 await interaction.followup.send(embed=embed, file=file)
#             elif q_type == "audio" and os.path.exists(q_data):
#                 file = discord.File(q_data, filename="question.mp3")
#                 await interaction.followup.send(embed=embed, file=file)
#             elif q_type == "text":
#                 embed.add_field(name="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ", value=q_data, inline=False)
#                 await interaction.followup.send(embed=embed)
#             else:
#                 await interaction.followup.send(embed=embed, content="‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø.")

#             await asyncio.sleep(1.5)  # –ó–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ rate-limit'—É






# –¢–∞–π–º–µ—Ä–∏, —â–æ–± –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
channel_timers = {}

@bot.event
async def on_voice_state_update(member, before, after):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–π—à–æ–≤ —É –∫–∞–Ω–∞–ª
    if before.channel is None and after.channel is not None:
        channel = after.channel
        members = [m for m in channel.members if not m.bot]  # –¢—ñ–ª—å–∫–∏ –Ω–µ-–±–æ—Ç–∏

        if len(members) >= 2 and channel.id not in channel_timers:
            print(f"‚úÖ –£ –∫–∞–Ω–∞–ª—ñ {channel.name} —Ç–µ–ø–µ—Ä {len(members)} —É—á–∞—Å–Ω–∏–∫—ñ–≤. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 10 —Ö–≤...")
            channel_timers[channel.id] = True
            await asyncio.create_task(play_after_delay(channel))

async def play_after_delay(channel):
    await asyncio.sleep(10 * 60)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 5 —Ö–≤–∏–ª–∏–Ω

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –¥–æ—Å—ñ —î 2+ –ª—é–¥–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ
    if channel and len([m for m in channel.members if not m.bot]) >= 2:
        print(f"üéµ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ {channel.name} –ø—ñ—Å–ª—è 10 —Ö–≤–∏–ª–∏–Ω.")
        await join_and_play_sound(channel)
    else:
        print(f"‚ùå –ú–µ–Ω—à–µ –Ω—ñ–∂ 2 —É—á–∞—Å–Ω–∏–∫–∏ –≤ {channel.name} –ø—ñ—Å–ª—è 10 —Ö–≤. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–≤—É–∫.")

    # –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä
    channel_timers.pop(channel.id, None)


async def join_and_play_sound(channel):
    # –ü—Ä–∏—î–¥–Ω—É—î–º–æ –±–æ—Ç–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
    voice_channel = channel
    voice_client = await voice_channel.connect()

    # –í–∫–∞–∑—É—î–º–æ —à–ª—è—Ö –¥–æ FFmpeg, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤ PATH
    ffmpeg_path = r"C:\Users\alexa\Desktop\BotDiscordGame\ffmpeg-7.1.1-essentials_build\ffmpeg-7.1.1-essentials_build\bin\ffmpeg.exe"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ FFmpeg

    # –ü—Ä–æ–≥—Ä–∞—î–º–æ –∑–≤—É–∫
    audio_source = FFmpegPCMAudio("sounds/V1.mpeg", executable=ffmpeg_path)
    voice_client.play(audio_source)

    # –ó–∞—á–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∑–≤—É–∫ –ø—Ä–æ–≥—Ä–∞—î—Ç—å—Å—è, —ñ –ø–æ—Ç—ñ–º –≤—ñ–¥'—î–¥–Ω–∞—î–º–æ –±–æ—Ç–∞ –≤—ñ–¥ –∫–∞–Ω–∞–ª—É
    while voice_client.is_playing():
        await asyncio.sleep(1)

    await voice_client.disconnect()


bot.run(settings['TOKEN'])